NB. ^: ------------------------------------------------------------------

f1 =: 3&+
f2 =: +
g  =: +:@[ + 3&*@]
x  =: ?30
y  =: ?30
n  =: 3+?10

(  f1^:n y) -: ".(;n$<'f1 '),' y'
(x f2^:n y) -: x&f2^:n y
(  f1^:g y) -: f1^:(g y) y
(x f2^:g y) -: x&f2 ^: (x g y) y

a=:t=: 911
4!:55 ;:'t x y'
b=: 7!:0 ''
a=: 7!:0 ''

x=: 1000?1e7
y=: ;~^:5 x
t=: ;~;~;~;~;~x
t -: y
x=: 0
t -: y

4!:55 ;:'t x y'
b=: 7!:0 ''
a -: b

x=: 1000?1e7
y=: <^:5 x
t=: <<<<<x
t -: y
x=: 0
t -: y

4!:55 ;:'t x y'
b=: 7!:0 ''
a -: b

f=: 3 : 0
 if. y do. 
  assert. 'limit error' -: (32 ?@$ 2)&~:^:] etx (4$32) ?@$ 2 
 end.
 1
)

f -.IF64

234 0 0 0 -: 0"0^:(0 2 3 7) 234
3j4 0 0 0 -: 0"0^:(0 2 3 7) 3j4

(o.^:(i.3 4)1) -: (o.1)^i.3 4
(o.^:p 1)      -: (o.1)^p=:_7+?4 5$15

(+/^:4 i. 2 3 4 5) -: +/,i.2 3 4 5
(o.^:(6) 2)        -: 2*(o.1)^6

f  =: 2&-
g  =: *&3
(f f^:_1 x) -: x=:?100
(f^:_1 f x) -: x
(g g^:_1 x) -: x=:?100
(g^:_1 g x) -: x

NB. applying f zero times when appropriate

f=: >: [ ".@(('c=:>:c')&[)
x=: 20 ?@$ 0
(f x) -: >:x [ c=: 0
(c=>./,n) *.        x  -: f^:n x [ c=: 0 [ n=: 0
(c=>./,n) *. (>:^:n x) -: f^:n x [ c=: 0 [ n=: 10 20 $ 0
(c=>./,n) *. (>:^:n x) -: f^:n x [ c=: 0 [ n=: 10 20 ?@$ 5

x=: 1:`2:`3:
y=: 'asdf'
(x ,&<^:[ y) -: x ,&<^:(x[y) y


NB. ^: Newton's Method --------------------------------------------------

eps =: 1e_8&*@+ 0&=
Da  =: 1 : '[ %~ + -&x ]'      NB. secant slope adverb with absolute diff.
D   =: 1 : 'eps x Da ]'        NB. secant slope adverb with relative diff.
Nt  =: 1 : '- x % x D'         NB. one iteration of Newton's method

*./ 1e_6 > | 3 - 3&* D 4 5 6
*./ 1e_6 > | (2&^ D 4 5 6) - (^.2)*2^4 5 6

(%:2) -: 3 : '(y^2)-2' Nt^:_ x=:1


NB. ^:_1 ----------------------------------------------------------------

ar   =: 5!:1
lr   =: 5!:5
inv  =: 1 : 'x^:_1'
test =: 2 : '((x b._1)-:lr<''y'') *. (y b._1)-:lr<''x''' 
f_g  =: 2 : ('f=.y :.x f.'; '((x b._1)-:lr<''y'') +. (x b._1)-:lr<''f''')
eq   =: 2 : '(ar<''x'') -: (ar<''y'')'
testx=: 2 : '(x b._1)-:lr<''y''' 

<  test >
<: test >:
+  test +
+: test -:
-  test -
-. test -.
*: test %:
%  test %
%. test %.
^  test ^.
|. test |.
|: test |:
,: test {.
#. test #:
/: test /:
[  test [
]  test ]
{. test ,:
". test ":
C. test C.
p. test p.
*/ test q:

({=) test (i."1&1)

m&+  testx ((-m)&+)          [ m=:o.?10000
m&-  testx (m&-)             [ m=:^0j1*?1000
-&m  testx (m&+)             [ m=:^0j1*?1000
m&*  testx ((%m)&*)          [ m=:o.?10000
m&%  testx (m&%)             [ m=:^0j1*?1000
%&m  testx (m&*)             [ m=:^0j1*?1000
m&o. testx ((-m)&o.)         [ m=:o.?10000
m&|. testx ((-m)&|.)         [ m=:o.?10000
m&^. testx (m&^)             [ m=:o.?10000
^.&m testx (%:&m)            [ m=:o.?10000
m&^  testx (m&^.)            [ m=:o.?10000
^&m  testx (m&%:)            [ m=:o.?10000
m&%: testx (^&m)             [ m=:o.?10000
%:&m testx (^.&m)            [ m=:o.?10000
p&{  testx ((/:p)&{ )        [ p=:?~13

([: *: [: +: [: -:    |.  ) testx ([: |. [: +: [: -: %:)
([: *: [: +: [: -: [: |. ]) testx ([: |. [: +: [: -: %:)

g=: 3!:2
(lr <'g') -: 0&(3!:1) b. _1
(lr <'g') -: 1&(3!:1) b. _1
(lr <'g') -: 0&(3!:3) b. _1
(lr <'g') -: 1&(3!:3) b. _1

i     -: {&m ^:_1 (i=: ?3 2$#m) { m=:?5 3$1000
(i{m) -: m&i.^:_1 (i=: ?3 2$#m) [ m=:?5 3$1000

([ -: m&#.    inv @ (m&#.    )) x=:1,?7$m [ m=:2+?7
([ -: (4$m)&#:inv @ ((4$m)&#:)) x=:  ?m^4 [ m=:2+?7

(-: f^:_1 @ f=:p:) x=:?5$100
(-: f^:_1 @ f=:+.) x=:j./_50+?2 10$100
(-: f^:_1 @ f=:*.) x=:j./_50+?2 10$100

+ /\  f_g (-    |.!.0 )
+ /\. f_g (- 1&(|.!.0))
* /\  f_g (%    |.!.1 )
* /\. f_g (% 1&(|.!.1))
= /\  f_g (=    |.!.1 )
= /\. f_g (= 1&(|.!.1))
~:/\  f_g (~:   |.!.0 )
~:/\. f_g (~:1&(|.!.0))
- /\  f_g ((-|.!.0) *"_1 $&1 _1@#)
- /\. f_g (+ 1&(|.!.0))
% /\  f_g ((%|.!.1) ^"_1 $&1 _1@#)
% /\. f_g (* 1&(|.!.1))

NB. <;.1    f_g ;
NB. <;.2    f_g ;
10j2&": f_g ".

x -: + /\ ^:_1 + /\ x=:>:?7 3$100
x -: + /\.^:_1 + /\.x
x -: - /\ ^:_1 - /\ x
x -: - /\.^:_1 - /\.x
x -: * /\ ^:_1 * /\ x
x -: * /\.^:_1 * /\.x
x -: % /\ ^:_1 % /\ x
x -: % /\.^:_1 % /\.x

y -: = /\ ^:_1 = /\ y=:?12 5$2
y -: = /\.^:_1 = /\.y
y -: ~:/\ ^:_1 ~:/\ y
y -: ~:/\.^:_1 ~:/\.y

f=: 3: * 12"_ + ]
x -: f f^:_1 x=:0.1*1+?2 10$100
x -: f^:_1 f x

f=: [: 2&* 10&^.
x -: f f^:_1 x=:0.1*1+?2 10$100
x -: f^:_1 f x

cap=: [:
f=: cap 2&* 10&^.
x -: f f^:_1 x=:0.1*1+?2 10$100
x -: f^:_1 f x

plus =: +
minus=: -
times=: *

(12&+^:_1 -: 12&plus ^:_1) x=:?2 10$100
(+&12^:_1 -: plus&12 ^:_1) x=:?2 10$100

(12&-^:_1 -: 12&minus^:_1) x=:?2 10$100
(-&12^:_1 -: minus&12^:_1) x=:?2 10$100

(+~^:_1 -: plus ~^:_1) x=:?2 10$100
(*~^:_1 -: times~^:_1) x=:?2 10$100

f_loc_     =: -:
fi_loc_    =: 3 : 'twice y'
twice_loc_ =: +:
g          =: f_loc_ :. fi_loc_

f=: + :. *
12 -: 3 (f^:_1) 4

x -: g g^:_1 x=:?2 10$100
x -: g^:_1 g x=:?2 10$100

m=: (_500+?1000),2^?20
m&p. testx ((({:m)%~1,~-{.m)&p.)
'domain error' -: ex '5 0&p. ^:_1 ]17'

b=: ? 100$2
n=: +/b
Expand=: (* +/\)@[ { -@>:@#@] {. ]
(b&Expand -: b&#^:_1) x=:    ?n$1000
(b&Expand -: b&#^:_1) x=:a.{~?n$#a.
(b&Expand -: b&#^:_1) x=:y {~?n$#y=:;:'tris kai deka phobia finden tush'
(b&Expand -: b&#^:_1) x=:    ?(n,5)$1000
(b&Expand -: b&#^:_1) x=:a.{~?(n,5)$#a.
(b&Expand -: b&#^:_1) x=:y {~?(n,5)$#y=:;:'tris kai deka phobia finden tush'
(b&Expand -: b&#^:_1) x=:    ?(n,2 5)$1000
(b&Expand -: b&#^:_1) x=:a.{~?(n,2 5)$#a.
(b&Expand -: b&#^:_1) x=:y {~?(n,2 5)$#y=:;:'tris kai deka phobia finden tush'

(2&+&.(b&#) y) -: b*2+y=:?((#b),5)$1000

'a a  a' -: 1 0 1 0 0 1&#^:_1 'a'

'length error' -: 1 0 1 0 0 1&#^:_1 etx 'ab'
'length error' -: 1 0 1 0 0 1&#^:_1 etx 'abcd'
'length error' -: 1 0 1 0 0 1&#^:_1 etx ,'a'

'length error' -: 1 0 1 0 0 1&#^:_1 etx i.2 4
'length error' -: 1 0 1 0 0 1&#^:_1 etx i.4 6
'length error' -: 1 0 1 0 0 1&#^:_1 etx i.1 3

x -: ]&.(   _2&|:) x=: ?2 3 4 5$1000
x -: ]&.(_2 _3&|:) x

18!:55 ;:'loc'


4!:55 ;:'a b c D Da Nt Expand ar cap eps eq f f1 f2 f_g '
4!:55 ;:'g h hi i id inv lr m minus n p plus '
4!:55 ;:'t test testx times x y '


